pipeline {
    agent any

    parameters {
        string(name: 'CUCUMBER_TAG', defaultValue: '', description: 'Run tests with this tag (e.g., @login, @register). Leave empty to run all tests.')
    }

    environment {
        WORKDIR = "${env.WORKSPACE}"
        PLAYWRIGHT_IMAGE = "mcr.microsoft.com/playwright:v1.52.0-jammy"
    }

    stages {
        stage('Checkout') {
            steps {
                echo '=== Checkout aşaması başlıyor ==='
                checkout scm
                echo '=== Checkout aşaması bitti ==='
            }
        }

        stage('Environment Check') {
            steps {
                echo '=== Environment Check başlıyor ==='
                sh '''
                  docker run --rm -it --init --ipc=host -v "$WORKDIR:/work" -w /work $PLAYWRIGHT_IMAGE bash -c '
                    echo "=== PATH ==="
                    echo $PATH
                    node --version
                    npm --version
                    pwd
                    ls -la
                  '
                '''
                echo '=== Environment Check bitti ==='
            }
        }

        stage('Install Dependencies') {
            steps {
                echo '=== npm install başlıyor ==='
                sh '''
                  docker run --rm -it --init --ipc=host -v "$WORKDIR:/work" -w /work $PLAYWRIGHT_IMAGE npm install || { echo "npm install HATASI!"; exit 1; }
                '''
                echo '=== npm install bitti ==='
            }
        }

        stage('Install Playwright Browsers') {
            steps {
                echo '=== Playwright browser kurulumu başlıyor ==='
                sh '''
                  docker run --rm -it --init --ipc=host -v "$WORKDIR:/work" -w /work $PLAYWRIGHT_IMAGE npx playwright install
                '''
                echo '=== Playwright browser kurulumu bitti ==='
            }
        }

        stage('Run Tests') {
            steps {
                echo '=== Testler başlıyor ==='
                script {
                    def tagOption = params.CUCUMBER_TAG?.trim() ? "--tags ${params.CUCUMBER_TAG}" : ""
                    sh """
                      docker run --rm -it --init --ipc=host -v \"$WORKDIR:/work\" -w /work $PLAYWRIGHT_IMAGE bash -c 'npx cucumber-js ${tagOption} --format html:cucumber-report.html --format junit:cucumber-report.xml || { echo "Testler HATASI!"; exit 1; }'
                    """
                }
                echo '=== Testler bitti ==='
            }
        }

        stage('Archive Reports') {
            steps {
                echo '=== Raporlar arşivleniyor ==='
                archiveArtifacts artifacts: 'cucumber-report.html,cucumber-report.xml'
                echo '=== Raporlar arşivlendi ==='
            }
        }

        stage('Publish JUnit Report') {
            steps {
                echo '=== JUnit raporu yayınlanıyor ==='
                junit 'cucumber-report.xml'
                echo '=== JUnit raporu yayınlandı ==='
            }
        }
    }

    post {
        always {
            echo 'Pipeline completed'
        }
        success {
            echo 'Pipeline succeeded!'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}
